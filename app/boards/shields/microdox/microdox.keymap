/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define NUM_SYM 1
#define NAV     2

/ {
	behaviors {
		rst: behavior_tap_hold1 {
			compatible = "zmk,behavior-hold-tap";
			label = "Bootloader Tap - Reset Hold";
			#binding-cells = <2>;
			tapping_term_ms = <200>;
            flavor = "balanced";
			bindings = <&reset>, <&bootloader>;
        };

        bh: layer_taps {
			compatible = "zmk,behavior-hold-tap";
			label = "Layer-Tap";
			#binding-cells = <2>;
			tapping_term_ms = <215>;
            flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
        };

        hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods";
			#binding-cells = <2>;
			tapping_term_ms = <230>;
            flavor = "balanced";
			bindings = <&kp>, <&kp>;
        };
        
        hm1: homerow_mods1 {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods";
			#binding-cells = <2>;
			tapping_term_ms = <210>;
            flavor = "balanced";
			bindings = <&kp>, <&kp>;
        };

        hm2: homerow_mods2 {
			compatible = "zmk,behavior-hold-tap";
			label = "homerow mods 2";
			#binding-cells = <2>;
			tapping_term_ms = <230>;
            flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
        };

        com_col: behavior_tap_hold10 {
		 	compatible = "zmk,behavior-hold-tap";
	     	label = "Tap comma_hold colon";
			#binding-cells = <2>;
			tapping_term_ms = <150>;
            flavor = "balanced";
		 	bindings = <&kp>, <&kp>;
	     	};
    	 };
    };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp Q &kp W &kp F &kp P &kp G &kp J &kp L &kp U &kp Y &kp QUOT    
    &hm2 LGUI A &hm LALT R &hm LCTL S &hm1 LSFT T &hm2 CLCK D &kp H &hm1 RSFT N &hm RCTL E &hm RALT I &hm2 LGUI O
    &kp Z &kp X &kp C &kp V &kp B &kp K &kp M &com_col SCLN CMMA &kp DOT &kp FSLH
    &kp ESC &kp TAB &bh 2 RET &bh 1 SPC &bh 2 RET &kp FSLH
            >;
        };

        num_sym {
            bindings = <
    &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp NUM_5 &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0    
    &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp EQL &kp MINUS       
    &kp DEL &none &none &kp LS(N9) &kp LS(MINUS) &none &kp LS(N0) &none &kp DOT &kp BSLH
    &none &none &trans &trans &kp RET &kp FSLH
            >;
        };

    nav {
            bindings = <
    &bt BT_SEL_CMD 0 &bt BT_SEL_CMD 1 &bt BT_SEL_CMD 2 &none &none &none &kp PGUP &kp UARW &none &kp BKSP    
    &trans &trans &trans &trans &none &kp HOME &kp LARW &kp DARW &kp RARW &kp END       
    &rgb_ug RGB_TOG &rgb_ug RGB_EFF &none &none &none &kp PGDN &none &none &kp BSLH &kp FSLH
    &bt BT_CLR &none &trans &cp C_PREVIOUS &cp C_PLAY_PAUSE &cp C_FAST_FORWARD
            >;
        };
    };
};